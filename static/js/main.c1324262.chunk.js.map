{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","Component","Counters","prevProps","prevState","onReset","counters","map","key","App","state","temp","k","v","handleReset","c","setState","handleIncrement","index","indexOf","handleDelete","counterID","filter","console","log","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1324262.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Stateless Functional Component\r\nconst NavBar = ({ totalCounters }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Counter extends Component {\r\n  // state = {\r\n  //   value: this.props.counter.value,\r\n  //   tags: [],\r\n  //   // tags: [\"tag1\", \"tag2\", \"tag3\"],\r\n  //   // imageUrl: \"https://picsum.photos/200\",\r\n  // };\r\n\r\n  //   styles = {\r\n  //     fontSize: 10,\r\n  //     fontWeight: \"bold\",\r\n  //   };\r\n\r\n  //   constructor() {\r\n  //     super();\r\n  //     this.handleIncrement.bind(this);\r\n  //   }\r\n\r\n  // handleIncrement = () => {\r\n  //   this.setState({ value: this.state.value + 1 });\r\n  // };\r\n\r\n  componentWillUnmount() {\r\n    //console.log(\"counter - unmount\");\r\n  }\r\n\r\n  // //invoke after any updates with props or states\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   //console.log(\"counter - update\");\r\n  //   //decide whether we can make Ajax call based on previous props or State\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* {this.props.children} */}\r\n        <span className={this.getBadgeClasses()}> {this.formatCount()} </span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-3\"\r\n        >\r\n          Delete\r\n        </button>\r\n        {/* {this.state.tags.length === 0 && <p>\"plz add new tags!\"</p>} */}\r\n        {/* {this.renderTags()} */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // renderTags() {\r\n  //   if (this.state.tags.length === 0) return <p>no tags!</p>;\r\n  //   return (\r\n  //     <ul>\r\n  //       {this.state.tags.map((tag) => (\r\n  //         <li key={tag}> {tag} </li>\r\n  //       ))}\r\n  //     </ul>\r\n  //   );\r\n  // }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-3 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nexport default class Counters extends Component {\r\n  componentWillUnmount() {\r\n    //console.log(\"counters - unmount\");\r\n  }\r\n\r\n  //invoke after any updates with props or states\r\n  componentDidUpdate(prevProps, prevState) {\r\n    //console.log(\"counters - update\");\r\n    //decide whether we can make Ajax call based on previous props or State\r\n  }\r\n\r\n  render() {\r\n    const { onReset, counters, onDelete, onIncrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            counter={counter}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n          >\r\n            {/* <h4>Counter #{counter.id}</h4> */}\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 1, temp: { k: \"k1\", v: \"v1\" } },\n      { id: 2, value: 2, temp: { k: \"k2\", v: \"v2\" } },\n      { id: 3, value: 3, temp: { k: \"k3\", v: \"v3\" } },\n      { id: 4, value: 4, temp: { k: \"k4\", v: \"v4\" } },\n    ],\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - Constructor\");\n  }\n\n  //invoke after any updates with props or states\n  componentDidUpdate(prevProps, prevState) {\n    //console.log(\"app - update\");\n    //decide whether we can make Ajax call based on previous props or State\n  }\n\n  //invoke before any removements of the components\n  //(react compare visual DOM with real DOM before display)\n  componentWillUnmount() {\n    //console.log(\"app - unmount\");\n  }\n\n  //invoke after the render()\n  componentDidMount() {\n    //Ajax Call - update data\n    //this.setState({})\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterID) => {\n    const counters = this.state.counters.filter(\n      (counter) => counter.id !== counterID\n    );\n    this.setState({ counters });\n    console.log(\"id= \" + counterID);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}