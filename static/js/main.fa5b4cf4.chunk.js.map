{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDecrement","disabled","value","onDelete","id","classes","Component","Counters","prevProps","prevState","onReset","counters","map","key","App","state","temp","k","v","handleReset","c","setState","handleIncrement","index","indexOf","handleDecrement","handleDelete","counterID","filter","console","log","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa5b4cf4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Stateless Functional Component\r\nconst NavBar = ({ totalCounters }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Counter extends Component {\r\n  // state = {\r\n  //   value: this.props.counter.value,\r\n  //   tags: [],\r\n  //   // tags: [\"tag1\", \"tag2\", \"tag3\"],\r\n  //   // imageUrl: \"https://picsum.photos/200\",\r\n  // };\r\n\r\n  //   styles = {\r\n  //     fontSize: 10,\r\n  //     fontWeight: \"bold\",\r\n  //   };\r\n\r\n  //   constructor() {\r\n  //     super();\r\n  //     this.handleIncrement.bind(this);\r\n  //   }\r\n\r\n  // handleIncrement = () => {\r\n  //   this.setState({ value: this.state.value + 1 });\r\n  // };\r\n\r\n  componentWillUnmount() {\r\n    //console.log(\"counter - unmount\");\r\n  }\r\n\r\n  // //invoke after any updates with props or states\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   //console.log(\"counter - update\");\r\n  //   //decide whether we can make Ajax call based on previous props or State\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-1\">\r\n          <span className={this.getBadgeClasses()}> {this.formatCount()} </span>\r\n        </div>\r\n        <div className=\"col\">\r\n          <button\r\n            onClick={() => this.props.onIncrement(this.props.counter)}\r\n            className=\"btn btn-secondary btn-sm\"\r\n          >\r\n            +\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.onDecrement(this.props.counter)}\r\n            className=\"btn btn-secondary btn-sm m-2\"\r\n            disabled={this.props.counter.value === 0 ? \"disabled\" : \"\"}\r\n          >\r\n            -\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.onDelete(this.props.counter.id)}\r\n            className=\"btn btn-danger btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n          {/* {this.state.tags.length === 0 && <p>\"plz add new tags!\"</p>} */}\r\n          {/* {this.renderTags()} */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // renderTags() {\r\n  //   if (this.state.tags.length === 0) return <p>no tags!</p>;\r\n  //   return (\r\n  //     <ul>\r\n  //       {this.state.tags.map((tag) => (\r\n  //         <li key={tag}> {tag} </li>\r\n  //       ))}\r\n  //     </ul>\r\n  //   );\r\n  // }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-3 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nexport default class Counters extends Component {\r\n  componentWillUnmount() {\r\n    //console.log(\"counters - unmount\");\r\n  }\r\n\r\n  //invoke after any updates with props or states\r\n  componentDidUpdate(prevProps, prevState) {\r\n    //console.log(\"counters - update\");\r\n    //decide whether we can make Ajax call based on previous props or State\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onReset,\r\n      counters,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecrement,\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            counter={counter}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n          >\r\n            {/* <h4>Counter #{counter.id}</h4> */}\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport Counters from \"./components/counters\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 1, temp: { k: \"k1\", v: \"v1\" } },\r\n      { id: 2, value: 2, temp: { k: \"k2\", v: \"v2\" } },\r\n      { id: 3, value: 3, temp: { k: \"k3\", v: \"v3\" } },\r\n      { id: 4, value: 4, temp: { k: \"k4\", v: \"v4\" } },\r\n    ],\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    console.log(\"App - Constructor\");\r\n  }\r\n\r\n  //invoke after any updates with props or states that caused component change\r\n  componentDidUpdate(prevProps, prevState) {\r\n    //console.log(\"app - update\");\r\n    //decide whether we can make Ajax call based on previous props or State\r\n  }\r\n\r\n  //invoke before any removements of the components\r\n  //(react compare visual DOM with real DOM before display)\r\n  componentWillUnmount() {\r\n    //console.log(\"app - unmount\");\r\n  }\r\n\r\n  //invoke after the render()\r\n  componentDidMount() {\r\n    //Ajax Call - update data\r\n    //this.setState({})\r\n  }\r\n\r\n  handleReset = () => {\r\n    const counters = this.state.counters.map((c) => {\r\n      c.value = 0;\r\n      return c;\r\n    });\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleIncrement = (counter) => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = { ...counter };\r\n    counters[index].value++;\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleDecrement = (counter) => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = { ...counter };\r\n    counters[index].value--;\r\n    this.setState({ counters });\r\n  };\r\n\r\n  handleDelete = (counterID) => {\r\n    const counters = this.state.counters.filter(\r\n      (counter) => counter.id !== counterID\r\n    );\r\n    this.setState({ counters });\r\n    console.log(\"id= \" + counterID);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar\r\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\r\n        />\r\n        <main className=\"container\">\r\n          <Counters\r\n            counters={this.state.counters}\r\n            onReset={this.handleReset}\r\n            onDelete={this.handleDelete}\r\n            onIncrement={this.handleIncrement}\r\n            onDecrement={this.handleDecrement}\r\n          />\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}